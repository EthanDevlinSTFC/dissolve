name: Pull Request

on:
  pull_request:
    branches:
    - develop

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-16.04, windows-latest, macos-latest]
    steps:
    - uses: actions/checkout@v1
    - name: Install Prerequisites (Linux)
      if: matrix.os == 'ubuntu-16.04'
      run: |
        sudo apt-get install bison libfreetype6-dev libftgl-dev ninja-build libopenmpi-dev openmpi-bin openmpi-common
    - name: Install Prerequisites (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install -y ninja winflexbison
        choco install mingw --version=7.3.0 --allow-downgrade
    - name: Install Prerequisties (OSX)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install bison ftgl ninja
    - name: Install Qt (Linux)
      if: matrix.os == 'ubuntu-16.04'
      run: |
        sudo add-apt-repository ppa:beineri/opt-qt-5.12.0-xenial -y
        sudo apt-get update -q
        sudo apt-get install qt512base qt512svg qt512imageformats -y
    - name: Install Qt (Windows)
      if: matrix.os == 'windows-latest'
      uses: jurplel/install-qt-action@v2.2.1
      with:
        version: 5.13.1
        host: windows
        arch: win64_mingw73
    - name: Install Qt (OSX)
      if: matrix.os == 'macos-latest'
      run: |
        brew install qt5
    - name: Build Prerequisites [Freetype] (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd $HOME
        git clone 'git://git.sv.nongnu.org/freetype/freetype2.git' freetype-latest
        Echo 'Compiling FreeType...'
        mkdir freetype-build
        cd freetype-build
        cmake -G "Ninja" ../freetype-latest -DBUILD_SHARED_LIBS:STRING=ON -DCMAKE_DISABLE_FIND_PACKAGE_HarfBuzz=TRUE -DCMAKE_DISABLE_FIND_PACKAGE_BZip2=TRUE -DCMAKE_DISABLE_FIND_PACKAGE_PNG=TRUE -DCMAKE_DISABLE_FIND_PACKAGE_ZLIB=TRUE
        ninja
    - name: Build Prerequisites [FTGL] (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd $HOME
        echo 'Compiling FTGL'
        git clone 'https://github.com/frankheckenbach/ftgl.git' ftgl-latest
        mkdir ftgl-build
        cd ftgl-build
        $env:INCLUDE += "$HOME\freetype-2.10.1;"
        $env:LIB += "$HOME\freetype-build;"
        cmake -G "Ninja" ..\ftgl-latest
        ninja
    - name: Build (Linux / Serial+GUI)
      if: matrix.os == 'ubuntu-16.04'
      run: |
        QT_BASE_DIR=/opt/qt512
        export QTDIR=$QT_BASE_DIR
        export PATH=$QT_BASE_DIR/bin:$PATH
        export LD_LIBRARY_PATH=$QT_BASE_DIR/lib/x86_64-linux-gnu:$QT_BASE_DIR/lib:$LD_LIBRARY_PATH
        mkdir build
        cd build
        cmake -G "Ninja" -DGUI:bool=true ../
        ninja
        cp dissolve ../tests
        cd ../
    - name: Build (Linux / Parallel)
      if: matrix.os == 'ubuntu-16.04'
      run: |
        rm -rf build
        mkdir build
        cd build
        cmake -G "Ninja" -DPARALLEL:bool=true ../
        ninja
        cp dissolve-mpi ../tests
        cd ../
    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir build
        cd build
        $env:INCLUDE += "$HOME\freetype-2.10.1;"
        $env:LIB += "$HOME\freetype-build;"
        $env:INCLUDE += "$HOME\ftgl-latest\src;"
        $env:LIB += "$HOME\ftgl-build\src;"
        cmake -G "Ninja" -DGUI:bool=true ../
        ninja
        cd ../
    - name: Build (OSX)
      if: matrix.os == 'macos-latest'
      run: |
        QTVER=`ls -d /usr/local/Cellar/qt/* | sed "s/.*\(5\.[0-9][0-9]\.[0-9]\)/\1/g"`
        export Qt5_DIR=/usr/local/Cellar/qt/$QTVER/lib/cmake/Qt5
        export Qt5Core_DIR=/usr/local/Cellar/qt/$QTVER/lib/cmake/Qt5Core
        export Qt5Widgets_DIR=/usr/local/Cellar/qt/$QTVER/lib/cmake/Qt5Widgets
        export Qt5PrintSupport_DIR=/usr/local/Cellar/qt/$QTVER/lib/cmake/Qt5PrintSupport
        export Qt5Gui_DIR=/usr/local/Cellar/qt/$QTVER/lib/cmake/Qt5Gui
        Qt5_ROOT=/usr/local/Cellar/qt/${QTVER}
        mkdir build
        cd build
        cmake -G "Ninja" -DGUI:bool=true ../
        ninja
        cd ../
    - name: Upload Test Artifacts (Linux)
      if: matrix.os == 'ubuntu-16.04'
      uses: actions/upload-artifact@v1
      with:
        name: test-artifacts
        path: tests/
  system-tests:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        test: [atomshake, broadening, calculate_avgmol, calculate_cn, calculate_dangle, calculate_rdf, calculate_sdf, correlations, energyforce1, epsr, exchangeable, pbctorsion, rdfmethod]
        method: [serial, parallel]
    steps:
    - name: Install Prerequisties (Parallel)
      if: matrix.method == 'parallel'
      run: |
        sudo apt-get install openmpi-bin openmpi-common
    - name: Download Test Artifacts
      uses: actions/download-artifact@v1
      with:
        name: test-artifacts
    - name: Run Test (Serial)
      if: matrix.method == 'serial'
      run: |
        cd serial-test-artifacts
        chmod u+x ./go ./dissolve
        ./go -a -s ./dissolve ${{ matrix.test }}
    - name: Run Test (Parallel)
      if: matrix.method == 'parallel'
      run: |
        cd test-artifacts
        chmod u+x ./go ./dissolve-mpi
        ./go -a -p ./dissolve-mpi ${{ matrix.test }}
