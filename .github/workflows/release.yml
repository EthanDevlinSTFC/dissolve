name: Release Deployment

on:
  push:
    branches:
    - develop

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-16.04, ubuntu-latest, windows-latest, macos-latest]
    steps:
    - uses: actions/checkout@v1
    - name: Build (Linux / Serial+GUI)
      if: matrix.os == 'ubuntu-latest'
      run: |
        ci/ubuntu/build_18.04_serial_gui
        cp build/dissolve tests/
    - name: Build (Linux / Parallel)
      if: matrix.os == 'ubuntu-latest'
      run: |
        ci/ubuntu/build_parallel
        cp build/dissolve-mpi tests/
    - name: Install Qt (Windows)
      if: matrix.os == 'windows-latest'
      uses: jurplel/install-qt-action@v2.2.1
      with:
        version: 5.13.1
        host: windows
        arch: win64_mingw73
    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        ci/windows/build_serial_gui.ps1
    - name: Build (OSX)
      if: matrix.os == 'macos-latest'
      run: |
        ci/osx/build_serial_gui
    - name: Create Artifacts (Linux / AppImage)
      if: matrix.os == 'ubuntu-16.04'
      run: |
        ci/ubuntu/package_16.04_serial_gui
        mv packages appimages
    - name: Create Artifacts (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        ci/windows/build_serial_gui.ps1
        mv packages installers
    - name: Create Artifacts (OSX)
      if: matrix.os == 'macos-latest'
      run: |
        ci/osx/package_serial_gui
        mv packages damage
    - name: Upload Artifacts (Linux)
      if: matrix.os == 'ubuntu-16.04'
      uses: actions/upload-artifact@v1
      with:
        name: artifacts-linux
        path: appimages/
    - name: Upload Test Artifacts (Linux / Serial)
      if: matrix.os == 'ubuntu-16.04'
      uses: actions/upload-artifact@v1
      with:
        name: test-artifacts-serial
        path: tests/
    - name: Upload Test Artifacts (Linux / Parallel)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v1
      with:
        name: test-artifacts-parallel
        path: tests/
    - name: Upload Artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v1
      with:
        name: artifacts-windows
        path: installers/
    - name: Upload Artifacts (OSX)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v1
      with:
        name: artifacts-osx
        path: damage/
  system-tests:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        test: [atomshake, broadening, calculate_avgmol, calculate_cn, calculate_dangle, calculate_rdf, calculate_sdf, correlations, energyforce1, epsr, exchangeable, pbctorsion, rdfmethod]
        method: [serial, parallel]
    steps:
    - name: Install Prerequisties (Parallel)
      if: matrix.method == 'parallel'
      run: |
        sudo apt-get install openmpi-bin openmpi-common
    - name: Download Test Artifacts (Serial)
      if: matrix.method == 'serial'
      uses: actions/download-artifact@v1
      with:
        name: test-artifacts-serial
    - name: Download Test Artifacts (Parallel)
      if: matrix.method == 'parallel'
      uses: actions/download-artifact@v1
      with:
        name: test-artifacts-parallel
    - name: Run Test (Serial)
      if: matrix.method == 'serial'
      run: |
        cd test-artifacts-serial
        chmod u+x ./go ./dissolve
        ./go -a -s ./dissolve ${{ matrix.test }}
    - name: Run Test (Parallel)
      if: matrix.method == 'parallel'
      run: |
        cd test-artifacts-parallel
        chmod u+x ./go ./dissolve-mpi
        ./go -a -p ./dissolve-mpi ${{ matrix.test }}
  publish:
    runs-on: ubuntu-latest
    needs: system-tests
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - uses: actions/checkout@v1
    - name: Download Artifacts (Linux)
      uses: actions/download-artifact@v1
      with:
        name: artifacts-linux
    - name: Download Artifacts (Windows)
      uses: actions/download-artifact@v1
      with:
        name: artifacts-windows
    - name: Download Artifacts (OSX)
      uses: actions/download-artifact@v1
      with:
        name: artifacts-osx
    - name: Rename Artifacts
      run: |
        SHORTHASH=`git rev-parse --short HEAD`
        VERSION=`grep "DISSOLVEVERSION" src/version.h | sed "s/.*\"\(.*\)\"/\1/g"`
        # Linux AppImages
        cd artifacts-linux
        mv -v Dissolve-${SHORTHASH}-x86_64.AppImage Dissolve-${VERSION}-x86_64.AppImage
        mv -v Dissolve-GUI-${SHORTHASH}-x86_64.AppImage Dissolve-GUI-${VERSION}-x86_64.AppImage
        cd ../
        # Windows Installer / Zip
        cd artifacts-windows
        # -- Names are OK as generated
        cd ../
        # OSX Disk Image
        cd artifacts-osx
        mv -v Dissolve-GUI-${VERSION}.dmg Dissolve-GUI-${VERSION}-Catalina.dmg
        cd ../
    - name: Create Example Data Archives
      run: |
        DISSOLVE_VERSION=`grep "DISSOLVEVERSION" src/version.h | sed "s/.*\"\(.*\)\"/\1/g"`
        cd ./examples
        ./package-examples -v $DISSOLVE_VERSION
    - name: Create Versioned Release
      run: |
        SHORTHASH=`git rev-parse --short HEAD`
        VERSION=`grep "DISSOLVEVERSION" src/version.h | sed "s/.*\"\(.*\)\"/\1/g"`
        echo "Code version detected as: $VERSION"
        ./ci/scripts/update-release -r ${{ github.repository }} -t ${VERSION} -n "${VERSION}" -f Recent.md artifacts-linux/*AppImage artifacts-windows/*.exe artifacts-windows/*.zip artifacts-osx/*dmg examples/*zip examples/*.tar.gz
