name: Development Build

on:
  push:
    branches:
    - develop

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-16.04, windows-latest, macos-latest]
    steps:
    - uses: actions/checkout@v1
    - name: Build (Linux)
      if: matrix.os == 'ubuntu-16.04'
      run: |
        ci/ubuntu/build_16.04_serial_gui
    - name: Install Qt (Windows)
      if: matrix.os == 'windows-latest'
      uses: jurplel/install-qt-action@v2.5.3
      with:
        version: 5.13.2
        host: windows
        arch: win64_mingw73
    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        ci/windows/build_serial_gui.ps1
    - name: Build (OSX)
      if: matrix.os == 'macos-latest'
      run: |
        ci/osx/build_serial_gui
    - name: Create Artifacts (Linux)
      if: matrix.os == 'ubuntu-16.04'
      run: |
        ci/ubuntu/package_16.04_serial_gui
        mv packages appimages
    - name: Create Artifacts (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        ci/windows/build_serial_gui.ps1
        mv packages installers
    - name: Create Artifacts (OSX)
      if: matrix.os == 'macos-latest'
      run: |
        ci/osx/package_serial_gui
        mv packages damagefiles
    - name: Upload Artifacts (Linux)
      if: matrix.os == 'ubuntu-16.04'
      uses: actions/upload-artifact@v1
      with:
        name: artifacts-linux
        path: appimages/
    - name: Upload Artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v1
      with:
        name: artifacts-windows
        path: installers/
    - name: Upload Artifacts (OSX)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v1
      with:
        name: artifacts-osx
        path: damagefiles/
  publish:
    runs-on: ubuntu-latest
    needs: build
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - uses: actions/checkout@v1
    - name: Download Artifacts (Linux)
      uses: actions/download-artifact@v1
      with:
        name: artifacts-linux
    - name: Download Artifacts (Windows)
      uses: actions/download-artifact@v1
      with:
        name: artifacts-windows
    - name: Download Artifacts (OSX)
      uses: actions/download-artifact@v1
      with:
        name: artifacts-osx
    - name: Rename Artifacts
      run: |
        SHORTHASH=`git rev-parse --short HEAD`
        VERSION=`grep "DISSOLVEVERSION" src/version.h | sed "s/.*\"\(.*\)\"/\1/g"`
        # Linux AppImages
        cd artifacts-linux
        mv -v Dissolve-${SHORTHASH}-x86_64.AppImage Dissolve-${VERSION}-${SHORTHASH}-x86_64.AppImage
        mv -v Dissolve-GUI-${SHORTHASH}-x86_64.AppImage Dissolve-GUI-${VERSION}-${SHORTHASH}-x86_64.AppImage
        cd ../
        # Windows Installer / Zip
        cd artifacts-windows
        mv Dissolve-GUI-${VERSION}-Win64.zip Dissolve-GUI-${VERSION}-${SHORTHASH}-Win64.zip
        mv Dissolve-GUI-${VERSION}-Win64.exe Dissolve-GUI-${VERSION}-${SHORTHASH}-Win64.exe
        cd ../
        # OSX Disk Image
        cd artifacts-osx
        mv Dissolve-GUI-${VERSION}.dmg Dissolve-GUI-${VERSION}-${SHORTHASH}-Catalina.dmg
        cd ../
    - name: Create Example Data Archives
      run: |
        DISSOLVE_VERSION=`grep "DISSOLVEVERSION" src/version.h | sed "s/.*\"\(.*\)\"/\1/g"`
        cd ./examples
        ./package-examples -v $DISSOLVE_VERSION
    - name: Update Continuous Release
      run: |
        SHORTHASH=`git rev-parse --short HEAD`
        DATE=`date`
        ./ci/scripts/update-release -r ${{ github.repository }} -t continuous -n "Continuous Build (${SHORTHASH})" -b "Continuous release from current \`develop\` branch at ${SHORTHASH}. Built ${DATE}." -p -e -u artifacts-linux/*AppImage artifacts-windows/*.exe artifacts-windows/*.zip artifacts-osx/*dmg examples/*zip examples/*.tar.gz
